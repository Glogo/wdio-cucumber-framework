"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adapterFactory = exports.CucumberAdapter = exports.default = void 0;

require("source-map-support/register");

var Cucumber = _interopRequireWildcard(require("cucumber"));

var _mockery = _interopRequireDefault(require("mockery"));

var _isGlob = _interopRequireDefault(require("is-glob"));

var _glob = _interopRequireDefault(require("glob"));

var _path = _interopRequireDefault(require("path"));

var _reporter = _interopRequireDefault(require("./reporter"));

var _Hookrunner = _interopRequireDefault(require("./Hookrunner"));

var _events = require("events");

var _config = require("@wdio/config");

var _sync = require("@wdio/sync");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class CucumberAdapter {
  constructor(cid, config, specs, capabilities, reporter) {
    this.cwd = process.cwd();
    this.cid = cid;
    this.specs = specs;
    this.reporter = reporter;
    this.capabilities = capabilities;
    this.config = config;
    this.cucumberOpts = Object.assign(_constants.DEFAULT_OPTS, config.cucumberOpts);
  }

  async run() {
    let runtimeError;
    let result;
    Cucumber.supportCodeLibraryBuilder.reset(this.cwd);

    try {
      await (0, _config.executeHooksWithArgs)(this.config.before, [this.capabilities, this.specs]);
      this.registerCompilers();
      this.loadSpecFiles();
      this.wrapSteps();
      Cucumber.setDefaultTimeout(this.cucumberOpts.timeout);
      const supportCodeLibrary = Cucumber.supportCodeLibraryBuilder.finalize();
      const eventBroadcaster = new _events.EventEmitter(); // eslint-disable-next-line no-new

      new _Hookrunner.default(eventBroadcaster, this.config);
      const reporterOptions = {
        capabilities: this.capabilities,
        ignoreUndefinedDefinitions: Boolean(this.cucumberOpts.ignoreUndefinedDefinitions),
        failAmbiguousDefinitions: Boolean(this.cucumberOpts.failAmbiguousDefinitions),
        tagsInTitle: Boolean(this.cucumberOpts.tagsInTitle)
      };
      new _reporter.default(eventBroadcaster, reporterOptions, this.cid, this.specs, this.reporter);
      const pickleFilter = new Cucumber.PickleFilter({
        featurePaths: this.specs,
        names: this.cucumberOpts.name,
        tagExpression: this.cucumberOpts.tagExpression
      });
      const testCases = await Cucumber.getTestCasesFromFilesystem({
        cwd: this.cwd,
        eventBroadcaster,
        featurePaths: this.specs,
        order: this.cucumberOpts.order,
        pickleFilter
      });
      const runtime = new Cucumber.Runtime({
        eventBroadcaster,
        options: this.cucumberOpts,
        supportCodeLibrary,
        testCases
      });
      await (0, _config.executeHooksWithArgs)(this.config.before, [this.capabilities, this.specs]);
      result = (await runtime.start()) ? 0 : 1;
    } catch (e) {
      runtimeError = e;
      result = 1;
    }

    await (0, _config.executeHooksWithArgs)(this.config.after, [runtimeError || result, this.capabilities, this.specs]);
    /**
     * in case the spec has a runtime error throw after the wdio hook
     */

    if (runtimeError) {
      throw runtimeError;
    } //await reporter.waitUntilSettled()


    return result;
  }

  registerCompilers() {
    if (!this.cucumberOpts.compiler || this.cucumberOpts.compiler.length === 0) {
      return; // throw new Error('A compiler must be defined')
    }

    this.cucumberOpts.compiler.forEach(compiler => {
      const parts = compiler.split(':');

      require(parts[1]);
    });
  }

  requiredFiles() {
    return this.cucumberOpts.require.reduce((files, requiredFile) => {
      if ((0, _isGlob.default)(requiredFile)) {
        return files.concat(_glob.default.sync(requiredFile));
      } else {
        return files.concat([requiredFile]);
      }
    }, []);
  }

  loadSpecFiles() {
    // we use mockery to allow people to import 'our' cucumber even though their spec files are in their folders
    // because of that we don't have to attach anything to the global object, and the current cucumber spec files
    // should just work with no changes with this framework
    _mockery.default.enable({
      useCleanCache: false,
      warnOnReplace: false,
      warnOnUnregistered: false
    });

    _mockery.default.registerMock('cucumber', Cucumber);

    this.requiredFiles().forEach(codePath => {
      let absolutePath;

      if (_path.default.isAbsolute(codePath)) {
        absolutePath = codePath;
      } else {
        absolutePath = _path.default.join(process.cwd(), codePath);
      } // This allows rerunning a stepDefinitions file


      delete require.cache[require.resolve(absolutePath)];

      require(absolutePath);
    });

    _mockery.default.disable();
  }
  /**
   * wraps step definition code with sync/async runner with a retry option
   */


  wrapSteps() {
    const sync = this.config.sync;
    const wrapStepSync = this.wrapStepSync;
    const wrapStepAsync = this.wrapStepAsync;
    Cucumber.setDefinitionFunctionWrapper(function syncAsyncRetryWrapper(fn, options = {}) {
      let retryTest = isFinite(options.retry) ? parseInt(options.retry, 10) : 0;
      let wrappedFunction = fn.name === 'async' || sync === false ? wrapStepAsync(fn, retryTest) : wrapStepSync(fn, retryTest);
      return wrappedFunction;
    });
  }
  /**
   * wrap step definition to enable retry ability
   * @param  {Function} code       step definition
   * @param  {Number}   retryTest  amount of allowed repeats is case of a failure
   * @return {Function}            wrapped step definiton for sync WebdriverIO code
   */


  wrapStepSync(code, retryTest = 0) {
    return function (...args) {
      return new Promise((resolve, reject) => (0, _sync.runFnInFiberContext)(_sync.executeSync.bind(this, code, retryTest, args), resultPromise => resultPromise.then(resolve, reject)).apply(this));
    };
  }
  /**
   * wrap step definition to enable retry ability
   * @param  {Function} code       step definitoon
   * @param  {Number}   retryTest  amount of allowed repeats is case of a failure
   * @return {Function}            wrapped step definiton for async WebdriverIO code
   */


  wrapStepAsync(code, retryTest = 0) {
    return function (...args) {
      return _sync.executeAsync.call(this, code, retryTest, args);
    };
  }

}

exports.CucumberAdapter = CucumberAdapter;
const _CucumberAdapter = CucumberAdapter;
const adapterFactory = {};
exports.adapterFactory = adapterFactory;

adapterFactory.run = async function (...args) {
  const adapter = new _CucumberAdapter(...args);
  const result = await adapter.run();
  return result;
};

var _default = adapterFactory;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,