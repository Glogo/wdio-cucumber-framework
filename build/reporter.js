"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _cucumber = require("cucumber");

var _CucumberEventListener = require("./CucumberEventListener");

var _utils = require("./utils");

var path = _interopRequireWildcard(require("path"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CucumberReporter {
  constructor(eventBroadcaster, options, cid, specs, reporter) {
    _defineProperty(this, "gherkinDocEvents", []);

    this.capabilities = options.capabilities;
    this.tagsInTitle = options.tagsInTitle || false;
    this.options = options;
    this.cid = cid;
    this.specs = specs;
    this.reporter = reporter;
    this.failedCount = 0;
    new _CucumberEventListener.CucumberEventListener(eventBroadcaster).on('before-feature', this.handleBeforeFeature.bind(this)).on('before-scenario', this.handleBeforeScenario.bind(this)).on('before-step', this.handleBeforeStep.bind(this)).on('after-step', this.handleAfterStep.bind(this)).on('after-scenario', this.handleAfterScenario.bind(this)).on('after-feature', this.handleAfterFeature.bind(this));
  }

  handleBeforeFeature(uri, feature) {
    this.featureStart = new Date();
    this.emit('suite:start', {
      uid: this.getUniqueIdentifier(feature),
      title: this.getTitle(feature),
      type: 'suite',
      file: uri,
      tags: feature.tags,
      description: feature.description,
      keyword: feature.keyword
    });
  }

  handleBeforeScenario(uri, feature, scenario) {
    this.scenarioStart = new Date();
    this.testStart = new Date();
    this.emit('suite:start', {
      uid: this.getUniqueIdentifier(scenario),
      title: this.getTitle(scenario),
      parent: this.getUniqueIdentifier(feature),
      type: 'suite',
      file: uri,
      tags: scenario.tags
    });
  }

  handleBeforeStep(uri, feature, scenario, step, sourceLocation) {
    this.testStart = new Date();
    this.emit('test:start', {
      uid: this.getUniqueIdentifier(step),
      title: step.text,
      type: 'test',
      file: uri,
      parent: this.getUniqueIdentifier(scenario, sourceLocation),
      duration: new Date() - this.testStart,
      tags: scenario.tags,
      featureName: feature.name,
      scenarioName: scenario.name,
      argument: (0, _utils.createStepArgument)(step)
    });
  }

  handleAfterStep(uri, feature, scenario, step, result, sourceLocation) {
    let e = 'undefined';

    switch (result.status) {
      case _cucumber.Status.FAILED:
      case _cucumber.Status.UNDEFINED:
        e = 'fail';
        break;

      case _cucumber.Status.PASSED:
        e = 'pass';
        break;

      case _cucumber.Status.PENDING:
      case _cucumber.Status.SKIPPED:
      case _cucumber.Status.AMBIGUOUS:
        e = 'pending';
    }

    let error = {};
    let stepTitle = step.text || step.keyword || 'Undefined Step';
    /**
     * if step name is undefined we are dealing with a hook
     * don't report hooks if no error happened
     */

    if (!step.text && result.status !== _cucumber.Status.FAILED) {
      return;
    }

    if (result.status === _cucumber.Status.UNDEFINED) {
      if (this.options.ignoreUndefinedDefinitions) {
        /**
         * mark test as pending
         */
        e = 'pending';
        stepTitle += ' (undefined step)';
      } else {
        /**
         * mark test as failed
         */
        this.failedCount++;
        error = {
          message: `Step "${stepTitle}" is not defined. You can ignore this error by setting
                              cucumberOpts.ignoreUndefinedDefinitions as true.`,
          stack: `${step.uri}:${step.line}`
        };
      }
    } else if (result.status === _cucumber.Status.FAILED) {
      /**
       * cucumber failure exception can't get send to parent process
       * for some reasons
       */
      let err = result.exception;

      if (err instanceof Error) {
        error = {
          message: err.message,
          stack: err.stack
        };
      } else {
        error = {
          message: err
        };
      }

      this.failedCount++;
    } else if (result.status === _cucumber.Status.AMBIGUOUS && this.options.failAmbiguousDefinitions) {
      e = 'fail';
      this.failedCount++;
      error = {
        message: result.exception
      };
    }

    const payload = {
      uid: this.getUniqueIdentifier(step),
      title: stepTitle.trim(),
      type: 'test',
      file: uri,
      parent: this.getUniqueIdentifier(scenario, sourceLocation),
      error: error,
      duration: new Date() - this.testStart,
      tags: scenario.tags,
      keyword: step.keyword,
      argument: (0, _utils.createStepArgument)(step)
    };
    this.emit('test:' + e, payload);
  }

  handleAfterScenario(uri, feature, scenario, sourceLocation) {
    this.emit('suite:end', {
      uid: this.getUniqueIdentifier(scenario, sourceLocation),
      title: this.getTitle(scenario),
      parent: this.getUniqueIdentifier(feature),
      type: 'suite',
      file: uri,
      duration: new Date() - this.scenarioStart,
      tags: scenario.tags
    });
  }

  handleAfterFeature(uri, feature) {
    this.emit('suite:end', {
      uid: this.getUniqueIdentifier(feature),
      title: this.getTitle(feature),
      type: 'suite',
      file: uri,
      duration: new Date() - this.featureStart,
      tags: feature.tags
    });
  }

  emit(event, payload) {
    let message = this.formatMessage({
      type: event,
      payload
    });
    message.cid = this.cid;
    message.specs = this.specs;
    message.uid = payload.uid;
    this.reporter.emit(message.type, message);
  }

  getTitle(featureOrScenario) {
    const name = featureOrScenario.name;
    const tags = featureOrScenario.tags;
    if (!this.tagsInTitle || !tags.length) return name;
    return `${tags.map(tag => tag.name).join(', ')}: ${name}`;
  }

  getUriOf(type) {
    if (!type || !type.uri) {
      return;
    }

    return type.uri.replace(process.cwd(), '');
  }

  getUniqueIdentifier(target, sourceLocation) {
    let name;
    let line;

    if (target.type === 'Hook') {
      name = path.basename(target.location.uri);
      line = target.location.line;
    } else if (target.type === 'ScenarioOutline') {
      name = target.name || target.text;
      line = sourceLocation.line;
      target.examples[0].tableHeader.cells.forEach((header, idx) => {
        if (name.indexOf('<' + header.value + '>') > -1) {
          target.examples[0].tableBody.forEach(tableEntry => {
            if (tableEntry.location.line === sourceLocation.line) {
              name = name.replace('<' + header.value + '>', tableEntry.cells[idx].value);
            }
          });
        }
      });
    } else {
      name = target.name || target.text;
      const location = target.location || target.locations[0];
      line = location && location.line || '';
    }

    return name + line;
  }

  formatMessage(params) {
    let message = {
      type: params.type
    };

    if (params.payload && params.payload.error) {
      message.error = params.payload.error;
      /**
       * hook failures are emitted as "test:fail"
       */

      if (params.payload.title && params.payload.title.match(/^"(before|after)( all)*" hook/g)) {
        message.type = 'hook:end';
      }
    }

    if (params.payload) {
      message.title = params.payload.title;
      message.parent = params.payload.parent ? params.payload.parent.title : null;
      message.fullTitle = params.payload.fullTitle ? params.payload.fullTitle() : message.parent + ' ' + message.title;
      message.pending = params.payload.pending || false;
      message.file = params.payload.file;
      message.duration = params.payload.duration;
      /**
       * Add the current test title to the payload for cases where it helps to
       * identify the test, e.g. when running inside a beforeEach hook
       */

      if (params.payload.ctx && params.payload.ctx.currentTest) {
        message.currentTest = params.payload.ctx.currentTest.title;
      }

      if (params.type.match(/Test/)) {
        message.passed = params.payload.state === 'passed';
      }

      if (params.payload.context) {
        message.context = params.payload.context;
      }
    }

    return message;
  }

}

var _default = CucumberReporter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,